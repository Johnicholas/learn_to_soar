# this is a soar component for computing the last element in a linear, lisp-ish list
# ("component" because it's two problem spaces and four operators, if I'm counting right)
#
# in prolog, this might look like:
#
# % my_last(+List, -MaybeElem)
# my_last(nil, Out) :- !, Out = nothing.
# my_last(cons(X, Xs), Out) :- !, my_last_helper(Xs, X, Out).
#
# % my_last_helper(+List, +Elem, -MaybeElem)
# my_last_helper(nil, X, Out) :- !, Out = just(X).
# my_last_helper(cons(X, Xs), _Y, Out) :- !, my_last_helper(Xs, X, Out).
#
# in haskell, this might look like:
#
# data List a = Nil | Cons(a, List a)
#
# my_last :: List a -> Maybe a
# my_last Nil = Nothing
# my_last (Cons(x, xs)) = my_last_helper xs x
#
# my_last_helper :: List a -> a -> Maybe a
# my_last_helper Nil x = Just(x)
# my_last_helper (Cons(x, xs)) y = my_last_helper xs x
#

sp {my-last*initialize
    (state <s> ^attribute operator
               ^impasse no-change
               ^superstate <ss>)
    (<ss> ^operator <o>)
    (<o> ^name my-last
         ^list <l>
         ^return-to <return-to>)
-->
    (<s> ^name my-last
         ^list <l>
         ^return-to <return-to>)}
         
sp {my-last*propose*my-last-nil
    (state <s> ^name my-last
               ^list nil)
-->
    (<s> ^operator <o>)
    (<o> ^name my-last-nil)}

sp {my-last*apply*my-last-nil
    (state <s> ^name my-last
               ^return-to <return-to>
               ^superstate <ss>
               ^operator <o>)
    (<o> ^name my-last-nil)
-->
    (<ss> ^<return-to> nothing)}

sp {my-last*propose*my-last-helper
    (state <s> ^name my-last
               ^list <l>
               -^helper-result) # Is this negation icky? I don't know "good Soar style"
    (<l> ^first <x> ^rest <xs>)
-->
    (<s> ^operator <o>)
    (<o> ^name my-last-helper
         ^list <xs>
         ^default-answer <x>
         ^return-to helper-result)}

sp {my-last*propose*my-last-helper-done
    "If we've recursed, and we have a result, then we should copy it upward"
    (state <s> ^name my-last
               ^helper-result <answer>)
-->
    (<s> ^operator <o>)
    (<o> ^name my-last-helper-done)}

sp {my-last*apply*my-last-helper-done
    "We've recursed, and we have an answer, so copy it upward"
    (state <s> ^name my-last
               ^helper-result <answer>
               ^return-to <return-to>
               ^superstate <ss>
               ^operator <o>)
    (<o> ^name my-last-helper-done)
-->
    (<ss> ^<return-to> <just>)
    (<just> ^just <answer>)}

sp {my-last-helper*initialize
    (state <s> ^attribute operator
               ^impasse no-change
               ^superstate <ss>)
    (<ss> ^operator <o>)
    (<o> ^name my-last-helper
         ^list <xs>
         ^default-answer <x>
         ^return-to <return-to>)
-->
    (<s> ^name my-last-helper
         ^list <xs>
         ^default-answer <x>
         ^return-to <return-to>)}

sp {my-last-helper*propose*my-last-helper-done
    (state <s> ^name my-last-helper
               ^list nil)
-->
    (<s> ^operator <o>)
    (<o> ^name my-last-helper-done)}

sp {my-last-helper*apply*my-last-helper-done
   (state <s> ^name my-last-helper
              ^list nil
              ^default-answer <answer>
              ^return-to <return-to>
              ^superstate <ss>
              ^operator <o>)
    (<o> ^name my-last-helper-done)
-->
    (<ss> ^<return-to> <answer>)}
              
sp {my-last-helper*propose*my-last-helper
    (state <s> ^name my-last-helper
               ^list <l>
               -^recursion-result)
    (<l> ^first <x> ^rest <xs>)
-->
    (<s> ^operator <o>)
    (<o> ^name my-last-helper
         ^list <xs>
         ^default-answer <x>
         ^return-to recursion-result)}

sp {my-last-helper*propose*recursion-done
    (state <s> ^name my-last-helper
               ^recursion-result <answer>)
-->
    (<s> ^operator <o>)
    (<o> ^name recursion-done)}

sp {my-last-helper*apply*recursion-done
    (state <s> ^name my-last-helper
               ^recursion-result <answer>
               ^return-to <return-to>
               ^superstate <ss>
               ^operator <o>)
    (<o> ^name recursion-done)
-->
    (<ss> ^<return-to> <answer>)}



################################################################
# snip here - test-only stuffs below    
#sp {initialize
#    (state <s> ^superstate nil)
#-->
#    (<s> ^name test-my-last)}
#
## first test
#sp {propose*last-of-nil
#    (state <s> ^name test-my-last)
#-->
#    (<s> ^operator <o>)
#    (<o> ^name my-last
#         ^list nil
#         ^return-to last-of-nil-is)}
#
#sp {pass
#    (state <s> ^name test-my-last ^last-of-nil-is nothing)
#-->
#    (write (crlf) |pass|)
#    (halt)}
#
## second test
#sp {propose*last-of-singleton
#    (state <s> ^name test-my-last)
#-->
#    (<s> ^operator <o>)
#    (<o> ^name my-last
#         ^list <cons>
#         ^return-to last-of-singleton-is)
#    (<cons> ^first foo ^rest nil)}
#         
#
#sp {pass
#    (state <s> ^name test-my-last ^last-of-singleton-is foo)
#-->
#    (write (crlf) |pass|)
#    (halt)}
#
## third test
#sp {propose*last-of-triple
#    (state <s> ^name test-my-last)
#-->
#    (<s> ^operator <o>)
#    (<o> ^name my-last
#         ^list <abc>
#         ^return-to last-of-triple-is)
#    (<abc> ^first a ^rest <bc>)
#    (<bc> ^first b ^rest <c>)
#    (<c> ^first c ^rest nil)}
#
#sp {pass
#    (state <s> ^name test-my-last ^last-of-triple-is.just c)
#-->
#    (write (crlf) |pass|)
#    (halt)}

