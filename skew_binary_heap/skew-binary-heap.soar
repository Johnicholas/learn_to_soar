# NOTE: THIS DEFINITELY DOES NOT WORK! ONLY 3 TESTS PASSING!
#
# This is derived from the SkewBinTree.hs implementation Graeme Moss used in his Auburn thesis.
#
# We assume there are two operators named less-than and less-or-equal,
# which can be invoked by proposing them,
# augmented with ^left <foo> and ^right <bar> (to compare <foo> and <bar>),
# and ^return-to baz if we want to see ^baz true, or ^baz false
#
# if <x> is a heap, then <x> is augmented with ^Heap <rep>,
#     where <rep> is a list-of-trees
# if <x> is a tree-list, then <x> is either nil, or augmented with both ^first <y> and ^rest <z>,
#     where <y> is a tree and
#     <z> is a tree-list
# if <x> is a tree, then <x> is augmented with ^rank <r> ^element <x> ^elem-list <xs> ^tree-list <c>,
#     where <r> is a number,
#     <x> is comparable with less-than or less-or-equal,
#     <xs> is an elem-list
#     <c> is a tree-list
# if <xs> is an elem-list, then <xs> is either nil, or augmented with both ^first <y> and ^rest <z>,
#     where <y> is comparable with less-than or less-or-equal, and
#     <z> is an elem-list
#
# empty-heap is an operator that allows people who don't know this internal representation of heaps,
# to create an empty heap, and be guaranteed that they got the internal representation right.
# To use it, propose an operator named empty-heap and augmented with ^return-to <wherever>
#
# insert-heap is an operator for inserting an element into a heap.
# propose an operator named insert-heap, augmented with ^element <to-be-inserted> and ^heap <starting-point>,
# as well as ^return-to <wherever>, and a new heap based on <starting-point> but including <to-be-inserted>
# will be placed at <wherever>.
#
# delete-min is an operator for deleting an element from a heap.
# propose an operator named delete-min, augmented with ^heap <starting-point> and ^return-to <wherever>
# a new heap based on <starting-point> but with one fewer element will be placed at <wherever>
# Don't propose it if the heap is empty - or write your own rules for what you want to happen in that circumstance.
#
# is-empty is an operator that allows people who don't know (or don't want to know) the internal representation of heaps,
# to test whether a heap is empty. Propose an operator named is-empty augmented with ^heap <to-test> and
# ^return-to <wherever>. is-empty will test the heap and either create (<s> ^<wherever> true) or (<s> ^<wherever> false).
#
# find-min is an operator to access the minimum element of a heap.
# propose an operator named find-min, augmented with ^heap <h> and ^return-to <wherever>
# the minimum element of the heap <h> will be put at ^<wherever>
# Don't propose it if the heap is empty - or write your own rules for what you want to happen in that circumstance.
#
# PRIVATE
#
# these operators are helpers or suboperators of the above public operators
# they aren't part of the heap concept or interface
#
# remove-min-tree is a smart destructor - it takes a list of trees and separates it into the one with the minimum root,
# and the rest of them. To use it, propose an operator named remove-min-tree, augmented with ^tree-list and ^return-to,
# and it will put an element at <return-to> that is augmented with ^tree <t> and ^tree-list <ts>,
# based on the tree-list you gave it.
#
# reverse is an operator - it takes a list of trees and constructs a reversed list of trees.
# to use it, propose an operator named reverse, augmented with ^tree-list and ^return-to
# and it will put an element at <return-to> which is the tree list reversed, based on the tree list you gave it
#
# normalize is an operator - it takes a list of trees and constructs a normalized list of trees.
#
# merge-helper is an operator - it takes two lists of trees (distinguished as ^left and ^right)
# and merges them
#
# insert-all is an operator - it takes an elem-list and a heap and inserts each element in the list into the heap
#
# skew-link is an operator - it takes a single element and a left and right tree and links them to form
# a new bigger tree, including the single element.
#
# link is an operator - it takes a left and right tree and links them to form a new bigger tree.
#
# ins-tree is an operator - it takes a tree and list of trees, and walks along the list,
# linking trees together until  it finds one of greater rank. 

sp {empty-heap*apply
    (state <s> ^operator <o>)
    (<o> ^name empty-heap ^return-to <return-to>)
-->
    (<s> ^<return-to> <e>)
    (<e> ^Heap nil)}

sp {insert-heap*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name insert-heap ^element <x> ^heap <h> ^return-to <r>)
-->
    (<s> ^name insert-heap ^element <x> ^heap <h> ^return-to <r>)}

# this is the easiest case of insert - inserting into an empty heap
# insert(?x, Heap(TNil)) == Heap(TCons(Node(0, ?x, ANil, TNil), TNil))
sp {insert-heap*apply*heap-is-empty
    (state <s> ^name insert-heap ^element <x> ^heap <h> ^superstate <ss> ^return-to <r>)
    (<h> ^Heap nil)
-->
    (<ss> ^<r> <h1>)
    (<h1> ^Heap <h2>)
    (<h2> ^first <h3> ^rest nil)
    (<h3> ^rank 0 ^element <x> ^elem-list nil ^tree-list nil)}

# this is next-easiest case, inserting into a single-treed heap
# insert(?x, Heap(TCons(?t, TNil))) == Heap(TCons(Node(0, ?x, ANil, TNil), TCons(?t, TNil)))
sp {insert-heap*apply*heap-is-single-treed
    (state <s> ^name insert-heap ^element <x> ^heap.Heap <ts> ^superstate <ss> ^return-to <r>)
    (<ts> ^first <t> ^rest nil)
-->
    (<ss> ^<r>.Heap <a>)
    (<a> ^first <n> ^rest <ts>)
    (<n> ^rank 0 ^element <x> ^elem-list nil ^tree-list nil)}

# okay, this is the same-rank insert case, one of the two slightly tricky ones.
# insert(?x, Heap(TCons(?t1, TCons(?t2, ?ts)))) ==
#   if rank(?t1) = rank(?t2) then
#      Heap(TCons(skewLink(?x, ?t1, ?t2), ?ts)) else
#      Heap(TCons(Node(0, ?x, ANil, TNil), ?ts))
sp {insert-heap*propose*skew-link
    (state <s> ^name insert-heap ^element <x> ^heap.Heap <ts1> -^skew-link-result)
    (<ts1> ^first <t1> ^rest <ts2>)
    (<ts2> ^first <t2> ^rest <ts>)
    (<t1> ^rank <r>)
    (<t2> ^rank <r>)
-->
    (<s> ^operator <o> +)
    (<o> ^name skew-link ^element <x> ^left <t1> ^right <t2> ^return-to skew-link-result)}

# insert(?x, Heap(TCons(?t1, TCons(?t2, ?ts)))) ==
#   if rank(?t1) = rank(?t2) then
#      Heap(TCons(skewLink(?x, ?t1, ?t2), ?ts)) else
#      Heap(TCons(Node(0, ?x, ANil, TNil), ?ts))
sp {insert-heap*apply*true-branch
    (state <s> ^name insert-heap
               ^superstate <ss>
               ^return-to <return-to>
               ^skew-link-result <r>
               ^heap.Heap.rest.rest <ts>)
-->
    (<ss> ^<return-to>.Heap <cons>)
    (<cons> ^first <r> ^rest <ts>)}

# we insist on an operator no-change impasse and subgoal for skew-link
sp {skew-link*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name skew-link ^element <x> ^left <t1> ^right <t2> ^return-to <r>)
-->
    (<s> ^name skew-link ^element <x> ^left <t1> ^right <t2> ^return-to <r>)}

# first we link the left and right trees
sp {skew-link*propose-link
    (state <s> ^name skew-link ^left <t1> ^right <t2> -^link-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name link ^left <t1> ^right <t2> ^return-to link-result)}

# once we have the link-result, 
# we need a comparison between the root of the linked tree,
# and our single element
sp {skew-link*propose*less-or-equal
    (state <s> ^name skew-link ^element <x> ^link-result.element <y> -^less-or-equal-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name less-or-equal ^left <x> ^right <y> ^return-to less-or-equal-result)}

# skewLink(?x, ?t1, ?t2) == skewLinkHelper(link(?t1, ?t2), ?x)
# skewLinkHelper(Node(?r, ?y, ?ys, ?c), ?x) ==
#  if lessOrEqual(?x, ?y) then
#     Node(?r, ?x, ACons(?y, ?ys), ?c) else
#     Node(?r, ?y, ACons(?x, ?ys), ?c)
sp {skew-link*apply*true-branch
    (state <s> ^name skew-link
               ^less-or-equal-result true
               ^superstate <ss>
               ^return-to <return-to>
               ^element <x>
               ^link-result <lr>)
    (<lr> ^rank <r> ^element <y> ^elem-list <ys> ^tree-list <c>)
-->
    (<ss> ^<return-to> <newnode>)
    (<newnode> ^rank <r> ^element <x> ^elem-list <cons> ^tree-list <c>)
    (<cons> ^first <y> ^rest <ys>)}

## skewLink(?x, ?t1, ?t2) == skewLinkHelper(link(?t1, ?t2), ?x)
## skewLinkHelper(Node(?r, ?y, ?ys, ?c), ?x) ==
##  if lessOrEqual(?x, ?y) then
##     Node(?r, ?x, ACons(?y, ?ys), ?c) else
##     Node(?r, ?y, ACons(?x, ?ys), ?c)
#sp {skew-link*apply*false-branch
#
# TODO
#

# we insist on an operator no-change impasse and subgoal for link
sp {link*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name link ^left <t1> ^right <t2> ^return-to <r>)
-->
    (<s> ^name link ^left <t1> ^right <t2> ^return-to <r>)}

# to decide which way we're going to link the trees, we need to compare their elements
# note again that less-or-equal is not provided by Heap.
# less-or-equal is assumed by Heap to be provided by the Heap client.
sp {link*propose*less-or-equal
    (state <s> ^name link ^left.element <x1> ^right.element <x2> -^less-or-equal-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name less-or-equal ^left <x1> ^right <x2> ^return-to less-or-equal-result)}

#link(Node(?r, ?x1, ?xs1, ?c1), Node(?ignored, ?x2, ?xs2, ?c2)) ==
#  if lessOrEqual(?x1, ?x2) then
#     Node(?r + 1, ?x1, ?xs1, TCons(Node(?ignored, ?x2, ?xs2, ?c2), ?c1)) else
#     Node(?r + 1, ?x2, ?xs2, TCons(Node(?r, ?x1, ?xs1, ?c1), ?c2))
sp {link*apply*true-branch
    (state <s> ^name link ^less-or-equal-result true ^left <l> ^right <r> ^superstate <ss> ^return-to <return-to>)
    (<l> ^rank <rank> ^element <x1> ^elem-list <xs1> ^tree-list <c1>)
-->
    (<ss> ^<return-to> <newnode>)
    (<newnode> ^rank (+ <rank> 1) ^element <x1> ^elem-list <xs1> ^tree-list <cons>)
    (<cons> ^first <r> ^rest <c1>)}

##link(Node(?r, ?x1, ?xs1, ?c1), Node(?ignored, ?x2, ?xs2, ?c2)) ==
##  if lessOrEqual(?x1, ?x2) then
##     Node(?r + 1, ?x1, ?xs1, TCons(Node(?ignored, ?x2, ?xs2, ?c2), ?c1)) else
##     Node(?r + 1, ?x2, ?xs2, TCons(Node(?r, ?x1, ?xs1, ?c1), ?c2))
#sp {link*apply*false-branch
#    (state <s> ^name link ^less-or-equal-result false
#
# TODO
#


# we insist on an operator no-change impasse and subgoal state for delete-min
sp {delete-min*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name delete-min ^heap <h> ^return-to <r>)
-->
    (<s> ^name delete-min ^heap <h> ^return-to <r>)}

# if we're computing delete-min, then we need the remove-min-tree result, unless we have it already
sp {delete-min*propose*remove-min-tree
    (state <s> ^name delete-min ^heap.Heap <ts> -^remove-min-tree-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name remove-min-tree ^tree-list <ts> ^return-to remove-min-tree-result)}

# we insist on an operator no-change impasse and subgoal state for remove-min-tree
sp {remove-min-tree*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name remove-min-tree ^tree-list <ts> ^return-to <r>)
-->
    (<s> ^name remove-min-tree ^tree-list <ts> ^return-to <r>)}

sp {remove-min-tree*apply*base-case
    (state <s> ^name remove-min-tree ^tree-list <ts> ^superstate <ss> ^return-to <r>)
    (<ts> ^first <x> ^rest nil)
-->
    (<ss> ^<r> <p>)
    (<p> ^tree <x> ^tree-list nil)}

sp {remove-min-tree*propose*recurse
    (state <s> ^name remove-min-tree ^tree-list.rest <ts> -^recursive-result)
    (<ts> ^first <ts1> ^rest <tss>)
-->
    (<s> ^operator <o> +)
    (<o> ^name remove-min-tree ^tree-list <ts> ^return-to recursive-result)}

# we've recursed, and now we're comparing the first of the list we started with to the min of the recursion
sp {remove-min-tree*propose*less-than
    (state <s> ^name remove-min-tree ^tree-list.first.element <rt> ^recursive-result.tree.element <rtprime>)
-->
    (<s> ^operator <o> +)
    (<o> ^name less-than ^left <rt> ^right <rtprime> ^return-to less-than-result)}

#sp {remove-min-tree*apply*true-branch
#
# TODO
#

# we've recursed and tested, but the best of the recursion is equal or better to ours
# we return a pair consisting of the best of the recursion, and our tree consed onto the tree-list.
sp {remove-min-tree*apply*false-branch
    (state <s> ^name remove-min-tree
               ^recursive-result <rr>
               ^less-than-result false
               ^tree-list <ts1>
               ^superstate <ss>
               ^return-to <return-to>)
    (<ts1> ^first <t> ^rest <ts2>)
    (<rr> ^tree <tprime> ^tree-list <tsprime>)
-->
    (<ss> ^<return-to> <pair>)
    (<pair> ^tree <tprime> ^tree-list <cons>)
    (<cons> ^first <t> ^rest <tsprime>)}

# if we're computing delete-min, and we have the remove-min-tree result,
# then we need the reverse result, unless we have it already
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*reverse
    (state <s> ^name delete-min ^remove-min-tree-result.tree.tree-list <ts> -^reverse-result <r>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name reverse ^tree-list <ts> ^return-to reverse-result)}

# we insist on an operator no-change and a new substate for reverse
sp {reverse*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name reverse ^tree-list <ts> ^return-to <r>)
-->
    (<s> ^name reverse ^tree-list <ts> ^return-to <r> ^accumulator nil)}

sp {reverse*done
    (state <s> ^name reverse ^tree-list nil ^superstate <ss> ^return-to <r> ^accumulator <a>)
-->
    (<ss> ^<r> <a>)}

sp {reverse*propose*step
    (state <s> ^name reverse ^tree-list <ts1>)
    (<ts1> ^first <t> ^rest <ts2>)
-->
    (<s> ^operator <o> +)
    (<o> ^name step)}

sp {reverse*apply*step
    (state <s> ^name reverse ^operator.name step ^tree-list <ts1> ^accumulator <a1>)
    (<ts1> ^first <t> ^rest <ts2>)
-->
    (<s> ^tree-list <ts1> - <ts2> ^accumulator <a1> - <a2>)
    (<a2> ^first <t> ^rest <a1>)}

# if we're computing delete-min, and we remove-min-tree result,
# then we need the normalize result, unless we have it already
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*normalize
    (state <s> ^name delete-min ^remove-min-tree-result.tree-list <ts> -^normalize-result)
-->
    (<s> ^operator <o> + =)
    (<o> ^name normalize ^tree-list <ts> ^return-to normalize-result)}

# we insist on an operator no-change impasse and subgoal state for delete-min
sp {normalize*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name normalize ^tree-list <ts> ^return-to <r>)
-->
    (<s> ^name normalize ^tree-list <ts> ^return-to <r>)}

sp {normalize*nil
    (state <s> ^name normalize ^tree-list nil ^superstate <ss> ^return-to <r>)
-->
    (<ss> ^<r> nil)}

sp {normalize*propose*ins-tree
    (state <s> ^name normalize ^tree-list <ts1>)
    (<ts1> ^first <t> ^rest <ts2>)
-->
    (<s> ^operator <o> +)
    (<o> ^name ins-tree ^tree <t> ^tree-list <ts2> ^return-to ins-tree-result)}

sp {normalize*apply*ins-tree*done
    (state <s> ^name normalize ^superstate <ss> ^return-to <r> ^ins-tree-result <a>)
-->
    (<ss> ^<r> <a>)}

sp {ins-tree*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name ins-tree ^tree <t> ^tree-list <ts2> ^return-to <r>)
-->
    (<s> ^name ins-tree ^tree <t> ^tree-list <ts2> ^return-to <r>)}

sp {ins-tree*apply*base-case
    (state <s> ^name ins-tree ^superstate <ss> ^return-to <r> ^tree-list nil ^tree <t>)
-->
    (<ss> ^<r> <cons>)
    (<cons> ^first <t> ^rest nil)}

# TODO: ins-tree step

# if we're computing delete-min, and we have reverse-result and normalize-result
# then we need merge-helper result, unless we have it already
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*merge-helper
    (state <s> ^name delete-min ^reverse-result <rr> ^normalize-result <nr> -^merge-helper-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name merge-helper ^left <rr> ^right <nr> ^return-to merge-helper-result)}

sp {merge-helper*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name merge-helper ^left <ts1> ^right <ts2> ^return-to <r>)
-->
    (<s> ^name merge-helper ^left <ts1> ^right <ts2> ^return-to <r>)}

sp {merge-helper*apply*right-is-nil
    (state <s> ^name merge-helper ^right nil ^superstate <ss> ^return-to <r> ^left <ts>)
-->
    (<ss> ^<r> <ts>)}

sp {merge-helper*apply*left-is-nil
    (state <s> ^name merge-helper ^left nil ^superstate <ss> ^return-to <r> ^right <ts>)
-->
    (<ss> ^<r> <ts>)}

# if we're computing delete-min, and we have merge-helper-result
# then we need to convert it into a heap
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*convert-heap
    (state <s> ^name delete-min ^merge-helper-result <ts> -^converted-heap)
-->
    (<s> ^operator <o> +)
    (<o> ^name convert-heap)}

# "converting" a tree-list into a heap just means blessing it with a ^Heap link
sp {delete-min*apply*convert-heap
    (state <s> ^name delete-min ^operator.name convert-heap ^merge-helper-result <ts>)
-->
    (<s> ^converted-heap.Heap <ts>)}

# if we're computing delete-min, and we have converted-heap,
# then we need insert-all-result unless we have it already
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*insert-all
    (state <s> ^name delete-min ^remove-min-tree-result.tree.elem-list <xs> ^converted-heap <h> -^insert-all-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name insert-all ^elem-list <xs> ^heap <h> ^return-to insert-all-result)}

# we insist on an operator no-change impasse and subgoal state for delete-min
sp {insert-all*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name insert-all ^elem-list <xs> ^heap <h> ^return-to <r>)
-->
    (<s> ^name insert-all ^elem-list <xs> ^heap <h> ^return-to <r>)}

sp {insert-all*apply*base-case
    (state <s> ^name insert-all ^elem-list nil ^superstate <ss> ^return-to <r> ^heap <h>)
-->
    (<ss> ^<r> <h>)}

sp {insert-all*propose*recurse
    (state <s> ^name insert-all ^elem-list.rest <xs> ^heap <h> -^recursion-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name insert-all ^elem-list <xs> ^heap <h> ^return-to recursion-result)}

sp {insert-all*propose*insert
    (state <s> ^name insert-all ^elem-list.first <x> ^recursion-result <h> -^insert-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name insert-heap ^element <x> ^heap <h> ^return-to insert-result)}

sp {insert-all*apply*recursive-case-done
    (state <s> ^name insert-all ^superstate <ss> ^return-to <r> ^insert-result <h>)
-->
    (<ss> ^<r> <h>)}

# if we're computing delete-min, and we have merge-helper-result
# then we need insert-all-result unless we have it already
# deleteMinHelper(Pair(Node(?ignored, ?x, ?xs, ?ts1), ?ts2)) ==
#   insertAll(?xs, Heap(mergeHelper(reverse(?ts1), normalize(?ts2))))
sp {delete-min*propose*done
    (state <s> ^name delete-min ^insert-all-result <h>)
-->
    (<s> ^operator <o>)
    (<o> ^name done)}

sp {delete-min*apply*done
    (state <s> ^name delete-min ^operator <o> ^superstate <ss> ^return-to <r> ^insert-all-result <ir>)
    (<o> ^name done)
-->
    (<ss> ^<r> <ir>)}

sp {is-empty*apply*true-branch
    (state <s> ^operator <o>)
    (<o> ^name is-empty ^heap.Heap nil ^return-to <r>)
-->
    (<s> ^<r> true)}

# not the absolute minimum, but pretty close
sp {is-empty*apply*false-branch
    (state <s> ^operator <o>)
    (<o> ^name is-empty ^heap.Heap <ts> ^return-to <r>)
    (<ts> ^first <n> ^rest)
    (<n> ^rank ^element ^elem-list ^tree-list)
-->
    (<s> ^<r> false)}

sp {find-min*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name find-min ^heap <h> ^return-to <r>)
-->
    (<s> ^name find-min ^heap <h> ^return-to <r>)}

# the first step in finding the minimum element is finding the minimum tree
sp {find-min*propose*remove-min-tree
    (state <s> ^name find-min ^heap.Heap <ts> -^find-min-tree-result)
-->
    (<s> ^operator <o> +)
    (<o> ^name remove-min-tree ^tree-list <ts> ^return-to find-min-tree-result)}

# the minimum element is the root of the minimum tree
sp {find-min*apply*done
    (state <s> ^name find-min ^superstate <ss> ^return-to <r> ^find-min-tree-result.tree.element <x>)
-->
    (<ss> ^<r> <x>)}

