setup {

source skew-binary-heap.soar

sp {initialize
    (state <s> ^superstate nil)
-->
    (<s> ^name test-skew-binary-heap)}

sp {test*less-or-equal*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name less-or-equal ^left.test <n1> ^right.test <n2> ^return-to <r>)
-->
    (<s> ^name test-less-or-equal ^left <n1> ^right <n2> ^min (min <n1> <n2>) ^return-to <r>)}

sp {test-less-or-equal*equal
    (state <s> ^name test-less-or-equal ^left <n> ^right <n> ^superstate <ss> ^return-to <r>)
-->
    (<ss> ^<r> true)}

#sp {test-less-or-equal*less
#    (state <s> ^name test-less-or-equal ^left <n> ^min <n> ^right <> <n> ^superstate <ss> ^return-to <r>)
#-->
#    (<ss> ^<r> true)}

#sp {test-less-or-equal*greater
#    (state <s> ^name test-less-or-equal ^right <n> ^min <n> ^left <> <n> ^superstate <ss> ^return-to <r>)
#-->
#    (<ss> ^<r> false)}

sp {test*less-than*initialize
    (state <s> ^superstate.operator <o>)
    (<o> ^name less-than ^left.test <n1> ^right.test <n2> ^return-to <r>)
-->
    (<s> ^name test-less-than ^left <n1> ^right <n2> ^min (min <n1> <n2>) ^return-to <r>)}

sp {test-less-than*equal
    (state <s> ^name test-less-than ^left <n> ^right <n> ^superstate <ss> ^return-to <r>)
-->
    (<ss> ^<r> false)}

# TODO: less-than less
# TODO: less-than greater

}

test "isEmpty(deleteMin(insert(Test(0),empty))) should be true" {

sp {propose*empty
    (state <s> ^name test-skew-binary-heap -^empty-heap-is)
-->
    (<s> ^operator <o>)
    (<o> ^name empty-heap ^return-to empty-heap-is)}

sp {propose*insert-heap*test*zero
    (state <s> ^name test-skew-binary-heap ^empty-heap-is <e> -^singleton-heap-is)
-->
    (<s> ^operator <o>)
    (<o> ^name insert-heap ^element <t0> ^heap <e> ^return-to singleton-heap-is)
    (<t0> ^test 0)}

sp {propose*delete-min
    (state <s> ^name test-skew-binary-heap ^singleton-heap-is <singleton> -^presume-empty-heap-is)
-->
    (<s> ^operator <o>)
    (<o> ^name delete-min ^heap <singleton> ^return-to presume-empty-heap-is)}

sp {propose*is-empty
    (state <s> ^name test-skew-binary-heap ^presume-empty-heap-is <e> -^test-result-is)
-->
    (<s> ^operator <o>)
    (<o> ^name is-empty ^heap <e> ^return-to test-result-is)}

sp {pass
    (state <s> ^name test-skew-binary-heap ^test-result-is true)
-->
    (pass)}

}

test "isEmpty(insert(Test(28), empty)) should be false" {

sp {propose*empty
    (state <s> ^name test-skew-binary-heap -^empty-heap-is)
-->
    (<s> ^operator <o>)
    (<o> ^name empty-heap ^return-to empty-heap-is)}

sp {propose*insert-heap*test*28
    (state <s> ^name test-skew-binary-heap ^empty-heap-is <e> -^singleton-heap-is)
-->
    (<s> ^operator <o>)
    (<o> ^name insert-heap ^element <t28> ^heap <e> ^return-to singleton-heap-is)
    (<t28> ^test 28)}

sp {propose*is-empty
    (state <s> ^name test-skew-binary-heap ^singleton-heap-is <sing> -^test-result-is)
-->
    (<s> ^operator <o>)
    (<o> ^name is-empty ^heap <sing> ^return-to test-result-is)}

sp {pass
    (state <s> ^name test-skew-binary-heap ^test-result-is false)
-->
    (pass)}

}

# TODO: "findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty))))) should be 0"

test "findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty))))) should be 0" {

source reusable-testing-productions.soar

sp {apply*create-test-cases
    (state <s> ^name test-skew-binary-heap ^operator.name create-test-cases)
-->
    (<s> ^first-test.test 0 ^second-test.test 0 ^third-test.test 0)}

sp {pass
    (state <s> ^name test-skew-binary-heap ^answer-is.test 0)
-->
    (pass)}

}

test "findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty)))))) should be Test(1)" {

source reusable-testing-productions.soar

sp {apply*create-test-cases
    (state <s> ^name test-skew-binary-heap ^operator.name create-test-cases)
-->
    (<s> ^first-test.test 0 ^second-test.test 0 ^third-test.test 1)}

sp {pass
    (state <s> ^name test-skew-binary-heap ^answer-is.test 1)
-->
    (pass)}

}

#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty)))))) should be Test(1)"
#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(2), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(2), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(0), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(0), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(1), empty)))))) should be Test(2)"
#"findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(1), empty)))))) should be Test(2)"

#"findMin(insert(Test(1), insert(Test(0), empty))) should be Test(0)"
# ideas: insert insert insert delete findMin
# ideas: insert insert delete insert findMin
# ideas: insert delete insert insert findMin
