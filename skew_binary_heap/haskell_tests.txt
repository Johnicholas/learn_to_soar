isEmpty(empty :: Heap Test) == True
isEmpty(insert(Test(0), empty :: Heap Test)) == False
findMin(insert(Test(0), empty :: Heap Test)) == Test(0)
isEmpty(insert(Test(1), empty :: Heap Test)) == False
findMin(insert(Test(1), empty :: Heap Test)) == Test(1)
isEmpty(insert(Test(2), empty :: Heap Test)) == False
findMin(insert(Test(2), empty :: Heap Test)) == Test(2)
isEmpty(insert(Test(3), empty :: Heap Test)) == False
findMin(insert(Test(3), empty :: Heap Test)) == Test(3)
isEmpty(insert(Test(4), empty :: Heap Test)) == False
findMin(insert(Test(4), empty :: Heap Test)) == Test(4)
isEmpty(insert(Test(5), empty :: Heap Test)) == False
findMin(insert(Test(5), empty :: Heap Test)) == Test(5)
isEmpty(deleteMin(insert(Test(0), empty :: Heap Test))) == True
isEmpty(insert(Test(6), empty :: Heap Test)) == False
findMin(insert(Test(6), empty :: Heap Test)) == Test(6)
isEmpty(deleteMin(insert(Test(1), empty :: Heap Test))) == True
isEmpty(insert(Test(7), empty :: Heap Test)) == False
findMin(insert(Test(7), empty :: Heap Test)) == Test(7)
isEmpty(deleteMin(insert(Test(2), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(8), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), empty :: Heap Test))) == Test(0)
findMin(insert(Test(8), empty :: Heap Test)) == Test(8)
isEmpty(deleteMin(insert(Test(3), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(9), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(1), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), empty :: Heap Test))) == Test(1)
findMin(insert(Test(9), empty :: Heap Test)) == Test(9)
isEmpty(deleteMin(insert(Test(4), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(10), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(2), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(1), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), empty :: Heap Test))) == Test(2)
findMin(insert(Test(10), empty :: Heap Test)) == Test(10)
isEmpty(deleteMin(insert(Test(5), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(11), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(3), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(2), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(1), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), empty :: Heap Test))) == Test(3)
findMin(insert(Test(11), empty :: Heap Test)) == Test(11)
isEmpty(deleteMin(insert(Test(6), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(12), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(4), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(3), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(2), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(1), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), empty :: Heap Test))) == Test(4)
findMin(insert(Test(12), empty :: Heap Test)) == Test(12)
isEmpty(deleteMin(insert(Test(7), empty :: Heap Test))) == True
isEmpty(insert(Test(0), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(13), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(5), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(4), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(3), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(2), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(1), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), empty :: Heap Test))) == Test(5)
findMin(insert(Test(13), empty :: Heap Test)) == Test(13)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(0)
isEmpty(insert(Test(0), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(14), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(6), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(5), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(4), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(3), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(2), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(1), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), empty :: Heap Test))) == Test(6)
findMin(insert(Test(14), empty :: Heap Test)) == Test(14)
isEmpty(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(1)
isEmpty(insert(Test(0), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(15), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(7), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(6), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(5), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(4), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(3), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(2), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(1), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), empty :: Heap Test))) == Test(7)
findMin(insert(Test(15), empty :: Heap Test)) == Test(15)
isEmpty(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(2)
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(16), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(7), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(6), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(5), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(4), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(3), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(2), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(1), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), empty :: Heap Test))) == Test(8)
findMin(insert(Test(16), empty :: Heap Test)) == Test(16)
isEmpty(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(2)
findMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(3)
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(17), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(8), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(7), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(6), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(5), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(4), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(3), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(2), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(1), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), empty :: Heap Test))) == Test(9)
findMin(insert(Test(17), empty :: Heap Test)) == Test(17)
isEmpty(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(4)
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(18), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(9), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(8), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(7), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(6), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(5), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(4), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(3), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(2), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(1), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), empty :: Heap Test))) == Test(10)
findMin(insert(Test(18), empty :: Heap Test)) == Test(18)
isEmpty(deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(5)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(19), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(10), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(9), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(8), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(7), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(6), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(5), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(4), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(3), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(2), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(1), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), empty :: Heap Test))) == Test(11)
findMin(insert(Test(19), empty :: Heap Test)) == Test(19)
isEmpty(deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(6)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(20), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(12), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(11), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(10), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(9), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(8), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(7), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(6), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(5), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(4), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(3), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(2), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(1), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(0), empty :: Heap Test))) == Test(12)
findMin(insert(Test(20), empty :: Heap Test)) == Test(20)
isEmpty(deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(15), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(7)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(21), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(13), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(12), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(11), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(10), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(9), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(8), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(7), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(6), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(5), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(4), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(3), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(2), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(1), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(0), empty :: Heap Test))) == Test(13)
findMin(insert(Test(21), empty :: Heap Test)) == Test(21)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(16), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(8)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(22), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(14), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(13), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(12), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(11), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(10), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(9), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(8), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(7), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(6), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(5), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(4), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(3), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(2), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(1), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(0), empty :: Heap Test))) == Test(14)
findMin(insert(Test(22), empty :: Heap Test)) == Test(22)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(17), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(9)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(23), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(15), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(14), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(13), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(12), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(11), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(10), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(9), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(8), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(7), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(6), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(5), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(4), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(3), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(2), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(1), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(0), empty :: Heap Test))) == Test(15)
findMin(insert(Test(23), empty :: Heap Test)) == Test(23)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(18), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(deleteMin(insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(10)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(24), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(16), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(15), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(14), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(13), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(12), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(11), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(10), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(9), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(8), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(7), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(6), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(5), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(4), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(3), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(2), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(1), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(0), empty :: Heap Test))) == Test(16)
findMin(insert(Test(24), empty :: Heap Test)) == Test(24)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(19), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(11)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(25), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(17), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(16), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(15), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(14), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(13), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(12), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(11), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(10), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(9), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(8), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(7), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(6), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(5), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(4), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(3), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(2), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(1), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(0), empty :: Heap Test))) == Test(17)
findMin(insert(Test(25), empty :: Heap Test)) == Test(25)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(20), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(5), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(6), insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(deleteMin(insert(Test(7), insert(Test(5), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(4), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(3), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(2), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(1), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(0), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(12)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(26), empty :: Heap Test)) == False
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(18), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(17), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(16), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(15), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(14), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(13), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(12), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(11), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(10), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(9), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(8), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(7), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(6), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(5), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(4), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(3), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(2), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(1), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(0), empty :: Heap Test))) == Test(18)
findMin(insert(Test(26), empty :: Heap Test)) == Test(26)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(21), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(6), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(6), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(5), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(4), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(3), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(2), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(1), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(0), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(13)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(19), empty :: Heap Test))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(19), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(27), empty :: Heap Test)) == False
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(19), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(18), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(17), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(16), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(15), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(14), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(13), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(12), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(11), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(10), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(9), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(8), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(7), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(6), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(5), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(4), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(3), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(2), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(1), empty :: Heap Test))) == Test(18)
findMin(insert(Test(19), insert(Test(0), empty :: Heap Test))) == Test(19)
findMin(insert(Test(27), empty :: Heap Test)) == Test(27)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(22), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(14), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(7), insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(deleteMin(insert(Test(8), insert(Test(6), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(5), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(4), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(3), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(2), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(1), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(14), insert(Test(0), empty :: Heap Test)))) == Test(14)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(14), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(6), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(14), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(14)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(20), empty :: Heap Test))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(19), empty :: Heap Test))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(19), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(20), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(28), empty :: Heap Test)) == False
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(20), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(19), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(18), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(17), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(16), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(15), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(14), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(13), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(12), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(11), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(10), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(9), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(8), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(7), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(6), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(5), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(4), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(3), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(2), empty :: Heap Test))) == Test(18)
findMin(insert(Test(19), insert(Test(1), empty :: Heap Test))) == Test(19)
findMin(insert(Test(20), insert(Test(0), empty :: Heap Test))) == Test(20)
findMin(insert(Test(28), empty :: Heap Test)) == Test(28)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(15), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(23), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(15), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(15), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(14), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(7), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(6), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(5), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(4), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(3), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(2), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(14), insert(Test(1), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(15), insert(Test(0), empty :: Heap Test)))) == Test(15)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(15), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(14), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(6), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(7), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(14), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(14)
findMin(insert(Test(15), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(15)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(9), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(10), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(9), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(10), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(21), empty :: Heap Test))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(20), empty :: Heap Test))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(19), empty :: Heap Test))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(19), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(20), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(21), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(29), empty :: Heap Test)) == False
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(21), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(20), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(19), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(18), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(17), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(16), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(15), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(7), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(14), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(13), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(9), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(12), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(11), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(11), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(10), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(9), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(13), insert(Test(8), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(7), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(6), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(5), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(4), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(3), empty :: Heap Test))) == Test(18)
findMin(insert(Test(19), insert(Test(2), empty :: Heap Test))) == Test(19)
findMin(insert(Test(20), insert(Test(1), empty :: Heap Test))) == Test(20)
findMin(insert(Test(21), insert(Test(0), empty :: Heap Test))) == Test(21)
findMin(insert(Test(29), empty :: Heap Test)) == Test(29)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(16), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(15), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(16), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(24), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(16), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(15), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(16), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(16), empty :: Heap Test)))) == Test(16)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(15), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(14), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(6), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(7), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(8), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(deleteMin(insert(Test(9), insert(Test(7), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(6), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(5), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(4), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(3), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(14), insert(Test(2), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(15), insert(Test(1), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(16), insert(Test(0), empty :: Heap Test)))) == Test(16)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(16), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(15), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(14), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(6), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(7), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(8), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(14), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(14)
findMin(insert(Test(15), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(15)
findMin(insert(Test(16), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(16)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(9), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(10), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(11), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(9), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(10), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(11), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(13), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(14), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(22), empty :: Heap Test))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(21), empty :: Heap Test))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(20), empty :: Heap Test))) == False
isEmpty(insert(Test(3), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(19), empty :: Heap Test))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(19), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(20), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(21), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(22), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(30), empty :: Heap Test)) == False
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(14), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(12), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(13), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(14), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(22), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(21), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(20), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(19), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(18), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(17), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(6), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(16), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(7), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(7), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(15), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(8), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(14), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(9), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(9), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(13), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(10), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(12), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(11), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(11), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(11), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(12), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(10), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(13), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(13), insert(Test(9), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(14), insert(Test(8), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(7), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(6), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(5), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(4), empty :: Heap Test))) == Test(18)
findMin(insert(Test(19), insert(Test(3), empty :: Heap Test))) == Test(19)
findMin(insert(Test(20), insert(Test(2), empty :: Heap Test))) == Test(20)
findMin(insert(Test(21), insert(Test(1), empty :: Heap Test))) == Test(21)
findMin(insert(Test(22), insert(Test(0), empty :: Heap Test))) == Test(22)
findMin(insert(Test(30), empty :: Heap Test)) == Test(30)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(6), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(7), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(8), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(9), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(17), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(16), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(15), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(16), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(17), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(25), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(17), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(16), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(15), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(16), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(17), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(9), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(6), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(7), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(8), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(9), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(17), empty :: Heap Test)))) == Test(17)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(1), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(16), empty :: Heap Test)))) == Test(16)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(15), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(14), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(6), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(7), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(8), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(9), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(deleteMin(insert(Test(9), insert(Test(8), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(7), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(6), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(5), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(4), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(14), insert(Test(3), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(15), insert(Test(2), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(16), insert(Test(1), empty :: Heap Test)))) == Test(16)
findMin(deleteMin(insert(Test(17), insert(Test(0), empty :: Heap Test)))) == Test(17)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(17), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(16), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(15), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(14), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(6), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(7), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(8), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(9), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(9), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(14), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(14)
findMin(insert(Test(15), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(15)
findMin(insert(Test(16), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(16)
findMin(insert(Test(17), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(17)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(12), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(9), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(10), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(11), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(12), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(12), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(9), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(10), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(11), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(12), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(13), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(14), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(15), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(23), empty :: Heap Test))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(6), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(7), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(8), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(9), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(10), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(11), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(12), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(13), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(14), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(22), empty :: Heap Test))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(21), empty :: Heap Test))) == False
isEmpty(insert(Test(3), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(20), empty :: Heap Test))) == False
isEmpty(insert(Test(4), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(19), empty :: Heap Test))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(18), empty :: Heap Test))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(17), empty :: Heap Test))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(16), empty :: Heap Test))) == False
isEmpty(insert(Test(8), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(15), empty :: Heap Test))) == False
isEmpty(insert(Test(9), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(14), empty :: Heap Test))) == False
isEmpty(insert(Test(10), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(13), empty :: Heap Test))) == False
isEmpty(insert(Test(11), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(11), insert(Test(12), empty :: Heap Test))) == False
isEmpty(insert(Test(12), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), insert(Test(11), empty :: Heap Test))) == False
isEmpty(insert(Test(13), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), insert(Test(10), empty :: Heap Test))) == False
isEmpty(insert(Test(14), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), insert(Test(9), empty :: Heap Test))) == False
isEmpty(insert(Test(15), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(15), insert(Test(8), empty :: Heap Test))) == False
isEmpty(insert(Test(16), insert(Test(7), empty :: Heap Test))) == False
isEmpty(insert(Test(17), insert(Test(6), empty :: Heap Test))) == False
isEmpty(insert(Test(18), insert(Test(5), empty :: Heap Test))) == False
isEmpty(insert(Test(19), insert(Test(4), empty :: Heap Test))) == False
isEmpty(insert(Test(20), insert(Test(3), empty :: Heap Test))) == False
isEmpty(insert(Test(21), insert(Test(2), empty :: Heap Test))) == False
isEmpty(insert(Test(22), insert(Test(1), empty :: Heap Test))) == False
isEmpty(insert(Test(23), insert(Test(0), empty :: Heap Test))) == False
isEmpty(insert(Test(31), empty :: Heap Test)) == False
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(deleteMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(15), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(14), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(7), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(8), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(9), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(10), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(11), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(12), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(13), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(14), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(15), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(23), empty :: Heap Test))) == Test(0)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(14), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(13), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(2), insert(Test(12), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(6), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(7), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(8), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(9), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(10), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(11), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(12), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(13), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(14), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(1), insert(Test(22), empty :: Heap Test))) == Test(1)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(13), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(1), insert(Test(12), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), insert(Test(11), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), insert(Test(10), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(5), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(6), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(7), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(8), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(9), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(10), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(11), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(12), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(2), insert(Test(13), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(2), insert(Test(21), empty :: Heap Test))) == Test(2)
findMin(insert(Test(3), deleteMin(deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), deleteMin(deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(0), insert(Test(12), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(1), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), insert(Test(11), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(2), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), insert(Test(10), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(3), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), insert(Test(9), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(4), insert(Test(8), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(5), insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(6), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(7), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(8), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(9), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(10), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(3), insert(Test(11), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(3), insert(Test(12), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(3), insert(Test(20), empty :: Heap Test))) == Test(3)
findMin(insert(Test(4), deleteMin(deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(0), insert(Test(11), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(1), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), insert(Test(10), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(2), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), insert(Test(9), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(3), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(3), insert(Test(8), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(4), insert(Test(7), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(5), insert(Test(6), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(6), insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(7), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(8), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(4), insert(Test(9), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(4), insert(Test(10), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(4), insert(Test(11), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(4), insert(Test(19), empty :: Heap Test))) == Test(4)
findMin(insert(Test(5), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(0), insert(Test(10), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), insert(Test(9), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(2), insert(Test(8), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(3), insert(Test(7), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(4), insert(Test(6), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), insert(Test(5), insert(Test(5), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(6), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(5), insert(Test(7), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(5), insert(Test(8), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(5), insert(Test(9), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(5), insert(Test(10), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(5), insert(Test(18), empty :: Heap Test))) == Test(5)
findMin(insert(Test(6), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(0), insert(Test(9), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(1), insert(Test(8), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(2), insert(Test(7), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(3), insert(Test(6), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(4), insert(Test(5), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(6), insert(Test(5), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(6), insert(Test(6), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(6), insert(Test(7), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(6), insert(Test(8), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(6), insert(Test(9), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(6), insert(Test(17), empty :: Heap Test))) == Test(6)
findMin(insert(Test(7), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(0), insert(Test(8), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(1), insert(Test(7), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(2), insert(Test(6), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(3), insert(Test(5), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(7), insert(Test(4), insert(Test(4), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(7), insert(Test(5), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(7), insert(Test(6), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(7), insert(Test(7), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(7), insert(Test(8), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(7), insert(Test(16), empty :: Heap Test))) == Test(7)
findMin(insert(Test(8), insert(Test(0), insert(Test(7), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(1), insert(Test(6), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(2), insert(Test(5), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(3), insert(Test(4), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(8), insert(Test(4), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(8), insert(Test(5), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(8), insert(Test(6), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(8), insert(Test(7), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(8), insert(Test(15), empty :: Heap Test))) == Test(8)
findMin(insert(Test(9), insert(Test(0), insert(Test(6), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(1), insert(Test(5), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(2), insert(Test(4), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(9), insert(Test(3), insert(Test(3), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(9), insert(Test(4), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(9), insert(Test(5), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(9), insert(Test(6), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(9), insert(Test(14), empty :: Heap Test))) == Test(9)
findMin(insert(Test(10), insert(Test(0), insert(Test(5), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(1), insert(Test(4), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(2), insert(Test(3), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(10), insert(Test(3), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(10), insert(Test(4), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(10), insert(Test(5), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(10), insert(Test(13), empty :: Heap Test))) == Test(10)
findMin(insert(Test(11), insert(Test(0), insert(Test(4), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(1), insert(Test(3), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(11), insert(Test(2), insert(Test(2), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(11), insert(Test(3), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(11), insert(Test(4), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(11), insert(Test(12), empty :: Heap Test))) == Test(11)
findMin(insert(Test(12), insert(Test(0), insert(Test(3), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(1), insert(Test(2), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(12), insert(Test(2), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(12), insert(Test(3), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(12), insert(Test(11), empty :: Heap Test))) == Test(12)
findMin(insert(Test(13), insert(Test(0), insert(Test(2), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(13), insert(Test(1), insert(Test(1), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(13), insert(Test(2), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(13), insert(Test(10), empty :: Heap Test))) == Test(13)
findMin(insert(Test(14), insert(Test(0), insert(Test(1), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(14), insert(Test(1), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(14), insert(Test(9), empty :: Heap Test))) == Test(14)
findMin(insert(Test(15), insert(Test(0), insert(Test(0), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(15), insert(Test(8), empty :: Heap Test))) == Test(15)
findMin(insert(Test(16), insert(Test(7), empty :: Heap Test))) == Test(16)
findMin(insert(Test(17), insert(Test(6), empty :: Heap Test))) == Test(17)
findMin(insert(Test(18), insert(Test(5), empty :: Heap Test))) == Test(18)
findMin(insert(Test(19), insert(Test(4), empty :: Heap Test))) == Test(19)
findMin(insert(Test(20), insert(Test(3), empty :: Heap Test))) == Test(20)
findMin(insert(Test(21), insert(Test(2), empty :: Heap Test))) == Test(21)
findMin(insert(Test(22), insert(Test(1), empty :: Heap Test))) == Test(22)
findMin(insert(Test(23), insert(Test(0), empty :: Heap Test))) == Test(23)
findMin(insert(Test(31), empty :: Heap Test)) == Test(31)
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(0), insert(Test(10), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(6), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(7), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(8), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(9), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(10), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(18), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(0), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(5), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(6), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(7), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(8), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(9), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(17), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(16), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(5), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(6), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(7), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(8), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(9), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(deleteMin(insert(Test(10), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(11), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(12), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(13), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(14), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(15), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(16), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(17), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(18), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(deleteMin(insert(Test(26), empty :: Heap Test))) == True
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), insert(Test(10), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(6), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(7), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(8), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(9), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(10), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(18), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), deleteMin(insert(Test(10), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), deleteMin(insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(2), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(3), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(8), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(9), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(10), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(17), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), deleteMin(insert(Test(16), empty :: Heap Test)))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(2), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(2), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), deleteMin(insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(3), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(3), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), deleteMin(insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(4), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(4), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), deleteMin(insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(5), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(5), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), deleteMin(insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(6), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(6), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), deleteMin(insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(7), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(7), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), deleteMin(insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(8), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(8), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), deleteMin(insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(9), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(9), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(10), deleteMin(insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(10), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(11), deleteMin(insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(12), deleteMin(insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(13), deleteMin(insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(14), deleteMin(insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(15), deleteMin(insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(16), deleteMin(insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(17), deleteMin(insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(18), deleteMin(insert(Test(0), empty :: Heap Test)))) == False
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(10), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(9), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(8), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(7), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(6), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(5), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(0), insert(Test(6), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(0), insert(Test(7), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(0), insert(Test(8), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(0), insert(Test(9), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(0), insert(Test(10), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(deleteMin(insert(Test(0), insert(Test(18), empty :: Heap Test)))) == Test(18)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(9), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(1), insert(Test(5), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(1), insert(Test(6), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(1), insert(Test(7), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(1), insert(Test(8), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(9), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(deleteMin(insert(Test(1), insert(Test(17), empty :: Heap Test)))) == Test(17)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(2), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(2), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(deleteMin(insert(Test(2), insert(Test(16), empty :: Heap Test)))) == Test(16)
findMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(deleteMin(insert(Test(3), insert(Test(15), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(deleteMin(insert(Test(4), insert(Test(14), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(deleteMin(insert(Test(5), insert(Test(13), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(6), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(deleteMin(insert(Test(6), insert(Test(12), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(7), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(deleteMin(insert(Test(7), insert(Test(11), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(8), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(deleteMin(insert(Test(8), insert(Test(10), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(9), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(9)
findMin(deleteMin(insert(Test(9), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(deleteMin(insert(Test(9), insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(deleteMin(insert(Test(10), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(10)
findMin(deleteMin(insert(Test(10), insert(Test(8), empty :: Heap Test)))) == Test(10)
findMin(deleteMin(insert(Test(11), insert(Test(7), empty :: Heap Test)))) == Test(11)
findMin(deleteMin(insert(Test(12), insert(Test(6), empty :: Heap Test)))) == Test(12)
findMin(deleteMin(insert(Test(13), insert(Test(5), empty :: Heap Test)))) == Test(13)
findMin(deleteMin(insert(Test(14), insert(Test(4), empty :: Heap Test)))) == Test(14)
findMin(deleteMin(insert(Test(15), insert(Test(3), empty :: Heap Test)))) == Test(15)
findMin(deleteMin(insert(Test(16), insert(Test(2), empty :: Heap Test)))) == Test(16)
findMin(deleteMin(insert(Test(17), insert(Test(1), empty :: Heap Test)))) == Test(17)
findMin(deleteMin(insert(Test(18), insert(Test(0), empty :: Heap Test)))) == Test(18)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(10), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(9), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(6), insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(7), insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(8), insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(9), insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(10), insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), deleteMin(insert(Test(18), empty :: Heap Test)))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(10), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(9), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(6), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(7), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(8), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(9), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(0), insert(Test(10), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(9), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(5), insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(6), insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(7), insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(8), insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(9), insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), deleteMin(insert(Test(17), empty :: Heap Test)))) == Test(1)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(9), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(0), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(0), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(1), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(5), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(6), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(7), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(8), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(1), insert(Test(9), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(1)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(8), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(4), insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(5), insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(6), insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(7), insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(8), insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), deleteMin(insert(Test(16), empty :: Heap Test)))) == Test(2)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(8), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(0), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == Test(0)
findMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(4), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(5), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(6), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(7), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(2), insert(Test(8), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(2)
findMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(7), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(3), insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(4), insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(5), insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(6), insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(7), insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), deleteMin(insert(Test(15), empty :: Heap Test)))) == Test(3)
findMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(7), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(3), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(4), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(5), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(6), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(3), insert(Test(7), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(3)
findMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(6), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(2), insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(3), insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(4), insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(5), insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(6), insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), deleteMin(insert(Test(14), empty :: Heap Test)))) == Test(4)
findMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(6), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(2), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(3), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(4), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(5), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(4), insert(Test(6), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(4)
findMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), deleteMin(insert(Test(13), empty :: Heap Test)))) == Test(5)
findMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(5), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(5)
findMin(insert(Test(6), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), deleteMin(insert(Test(12), empty :: Heap Test)))) == Test(6)
findMin(insert(Test(6), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(6), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(6)
findMin(insert(Test(7), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), deleteMin(insert(Test(11), empty :: Heap Test)))) == Test(7)
findMin(insert(Test(7), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(7), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(7)
findMin(insert(Test(8), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), deleteMin(insert(Test(10), empty :: Heap Test)))) == Test(8)
findMin(insert(Test(8), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(8), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(8)
findMin(insert(Test(9), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(9), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(9), deleteMin(insert(Test(9), empty :: Heap Test)))) == Test(9)
findMin(insert(Test(9), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(9), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(9)
findMin(insert(Test(10), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test))))) == Test(10)
findMin(insert(Test(10), deleteMin(insert(Test(8), empty :: Heap Test)))) == Test(10)
findMin(insert(Test(10), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test))))) == Test(10)
findMin(insert(Test(11), deleteMin(insert(Test(7), empty :: Heap Test)))) == Test(11)
findMin(insert(Test(12), deleteMin(insert(Test(6), empty :: Heap Test)))) == Test(12)
findMin(insert(Test(13), deleteMin(insert(Test(5), empty :: Heap Test)))) == Test(13)
findMin(insert(Test(14), deleteMin(insert(Test(4), empty :: Heap Test)))) == Test(14)
findMin(insert(Test(15), deleteMin(insert(Test(3), empty :: Heap Test)))) == Test(15)
findMin(insert(Test(16), deleteMin(insert(Test(2), empty :: Heap Test)))) == Test(16)
findMin(insert(Test(17), deleteMin(insert(Test(1), empty :: Heap Test)))) == Test(17)
findMin(insert(Test(18), deleteMin(insert(Test(0), empty :: Heap Test)))) == Test(18)
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(0), insert(Test(5), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(1), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(2), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(3), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(4), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(5), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(0), insert(Test(13), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(1), insert(Test(12), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(2), insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(3), insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(4), insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(deleteMin(insert(Test(5), insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(6), insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(7), insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(8), insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(9), insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(10), insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(11), insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(12), insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(deleteMin(insert(Test(13), insert(Test(0), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), deleteMin(insert(Test(13), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(0), insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(0), insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), deleteMin(insert(Test(12), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(1), insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(1), insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(0), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(1), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(2), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(3), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), deleteMin(insert(Test(11), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(2), insert(Test(0), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(1), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(2), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(2), insert(Test(3), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(0), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(1), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(2), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), deleteMin(insert(Test(10), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(3), insert(Test(0), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(1), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(3), insert(Test(2), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(0), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(1), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), deleteMin(insert(Test(9), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(4), insert(Test(0), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(4), insert(Test(1), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(5), deleteMin(insert(Test(8), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(5), insert(Test(0), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(deleteMin(insert(Test(6), deleteMin(insert(Test(7), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(7), deleteMin(insert(Test(6), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(8), deleteMin(insert(Test(5), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(9), deleteMin(insert(Test(4), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(10), deleteMin(insert(Test(3), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(11), deleteMin(insert(Test(2), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(12), deleteMin(insert(Test(1), empty :: Heap Test))))) == True
isEmpty(deleteMin(insert(Test(13), deleteMin(insert(Test(0), empty :: Heap Test))))) == True
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(0), insert(Test(5), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(1), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(2), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(3), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(4), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(deleteMin(insert(Test(5), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(0), deleteMin(insert(Test(5), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(1), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(2), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(3), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(4), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), deleteMin(insert(Test(5), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(0), insert(Test(8), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(1), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(2), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(3), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(4), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(5), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(6), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(7), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(8), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(0), insert(Test(16), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(1), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(2), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(3), insert(Test(13), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(0), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(1), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(2), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(3), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(4), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(4), insert(Test(12), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(0), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(1), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(2), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(3), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(5), insert(Test(11), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(0), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(1), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(2), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(6), insert(Test(10), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(0), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(1), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(7), insert(Test(9), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(0), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(0), insert(Test(8), insert(Test(8), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(9), insert(Test(7), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(10), insert(Test(6), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(11), insert(Test(5), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(12), insert(Test(4), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(13), insert(Test(3), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(14), insert(Test(2), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(15), insert(Test(1), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(16), insert(Test(0), empty :: Heap Test)))) == False
isEmpty(insert(Test(0), insert(Test(24), empty :: Heap Test))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(0), insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(1), insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(2), insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(3), insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(deleteMin(insert(Test(4), insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(0), deleteMin(insert(Test(4), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(1), deleteMin(insert(Test(3), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(2), deleteMin(insert(Test(2), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(3), deleteMin(insert(Test(1), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), deleteMin(insert(Test(4), deleteMin(insert(Test(0), empty :: Heap Test)))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(0), insert(Test(7), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(1), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(2), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(3), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(4), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(5), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(6), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(7), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(0), insert(Test(15), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(0), insert(Test(6), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(1), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(2), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(3), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(4), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(5), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(6), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(1), insert(Test(14), empty :: Heap Test)))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(0), insert(Test(5), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(1), insert(Test(4), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(2), insert(Test(3), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(3), insert(Test(2), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(4), insert(Test(1), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(5), insert(Test(0), empty :: Heap Test))))) == False
isEmpty(insert(Test(1), insert(Test(2), insert(Test(13), empty :: Heap Test)))) == False
