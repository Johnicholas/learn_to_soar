# perhaps useful for testing

######################################## leq
sp {leq*apply*a-b-yes
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left a
        ^right b
        ^return-to <r>)
-->
   (<r> ^leq-done yes)}

sp {leq*apply*b-a-no
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left b
        ^right a
        ^return-to <r>)
-->
   (<r> ^leq-done no)}

sp {leq*apply*a-c-yes
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left a
        ^right c
        ^return-to <r>)
-->
   (<r> ^leq-done yes)}

sp {leq*apply*c-a-no
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left c
        ^right a
        ^return-to <r>)
-->
   (<r> ^leq-done no)}

sp {leq*apply*b-c-yes
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left b
        ^right c
        ^return-to <r>)
-->
   (<r> ^leq-done yes)}

sp {leq*apply*c-b-no
   (state <s> ^operator <o>)
   (<o> ^name leq
        ^left c
        ^right b
        ^return-to <r>)
-->
   (<r> ^leq-done no)}

############################################### cba
# cba takes a return-to and constructs
# a list of heaps and puts it there
sp {cba*elaborate*initialize
   (state <s> ^superstate.operator <o>)
   (<o> ^name cba
        ^return-to <r>)
-->
   (<s> ^name cba
        ^return-to <r>
        ^c <c>
        ^bc <bc>
        ^abc <abc>)}

sp {cba*propose*insert-c
   (state <s> ^name cba
              ^c <c>)
   (<c> -^insert-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name insert
        ^elem c
        ^heap empty
        ^return-to <c>)}

sp {cba*propose*insert-b
   (state <s> ^name cba
              ^c.insert-done <c>
              ^bc <bc>)
   (<bc> -^insert-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name insert
        ^elem b
        ^heap <c>
        ^return-to <bc>)}

sp {cba*propose*insert-a
   (state <s> ^name cba
              ^bc.insert-done <bc>
              ^abc <abc>)
   (<abc> -^insert-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name insert
        ^elem a
        ^heap <bc>
        ^return-to <abc>)}

sp {cba*elaborate*done
   (state <s> ^name cba
              ^return-to <r>
              ^c.insert-done <c>
              ^bc.insert-done <bc>
              ^abc.insert-done <abc>)
-->
   (<r> ^cba-done.cons <c1>)
   (<c1> ^first <c> ^rest.cons <c2>)
   (<c2> ^first <bc> ^rest.cons <c3>)
   (<c3> ^first <abc> ^rest nil)}

######################################
# ecba takes a return-to and puts
# a list of heaps there
sp {ecba*elaborate*initialize
   (state <s> ^superstate.operator <o>)
   (<o> ^name ecba
        ^return-to <r>)
-->
   (<s> ^name ecba
        ^return-to <r>
        ^c <c>
        ^bc <bc>
        ^abc <abc>)}

sp {ecba*propose*cba
   (state <s> ^name ecba
             -^cba-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name cba
        ^return-to <s>)}

sp {ecba*elaborate*done
   (state <s> ^name ecba
              ^return-to <r>
              ^cba-done <cba>)
-->
   (<r> ^ecba-done.cons <c1>)
   (<c1> ^first empty ^rest <cba>)}

#############################################
# map takes a ^fun, a ^list and a ^return-to 
#
# Note: since we're testing a heap ADT,
# the list is a list of heaps.
# This is not a generic all-purpose map,
# it's just to get this testing done.

sp {map*elaborate*initialize
   (state <s> ^superstate.operator <o>)
   (<o> ^name map
        ^fun <f>
        ^list <l>
        ^return-to <r>)
-->
  (<s> ^name map
       ^fun <f>
       ^list <l>
       ^return-to <r>)}

sp {map*elaborate*nil
   (state <s> ^name map
              ^list nil)
-->
   (<s> ^answer nil)}

# I don't like using RHS functions most of the time
# but this time more than usual.
# It's just for testing, is what I tell myself.
sp {map*elaborate*expected
   (state <s> ^name map
              ^fun <f>)
-->
   (<s> ^expected (concat <f> -done))}


sp {map*propose*fun
   (state <s> ^name map
              ^fun <f>
              ^list.cons.first <heap>
              ^expected <e>
             -^<e>)
-->
   (<s> ^operator <o> +)
   (<o> ^name <f>
        ^heap <heap>
        ^return-to <s>)}

sp {map*propose*recurse
   (state <s> ^name map
              ^expected <e>
              ^<e> <first>
              ^fun <f>
              ^list.cons.rest <rest>
             -^map-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name map
        ^fun <f>
        ^list <rest>
        ^return-to <s>)}

sp {map*elaborate*cons
   (state <s> ^name map
              ^expected <e>
              ^<e> <first>
              ^map-done <rest>)
-->
   (<s> ^answer.cons <c1>)
   (<c1> ^first <first>
         ^rest <rest>)}

sp {map*elaborate*done
   (state <s> ^name map
              ^return-to <r>
              ^answer <a>)
-->
   (<r> ^map-done <a>)}

################################################
# deletethenfind takes a ^heap and a ^return-to
# it first deletemins the heap (assuming it is nonempty)
# and then tests the result with isempty
# if it is not empty
# it goes on to findmin the result
# it returns maybe elem - either nothing
# or ^just <elem>
sp {deletethenfind*elaborate*initialize
   (state <s> ^superstate.operator <o>)
   (<o> ^name deletethenfind
        ^heap <h>
        ^return-to <r>)
-->
   (<s> ^name deletethenfind
        ^heap <h>
        ^return-to <r>)}

sp {deletethenfind*propose*deletemin
   (state <s> ^name deletethenfind
              ^heap <h>
             -^deletemin-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name deletemin
        ^heap <h>
        ^return-to <s>)}

sp {deletethenfind*propose*isempty
   (state <s> ^name deletethenfind
              ^deletemin-done <lessone>
             -^isempty-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name isempty
        ^heap <lessone>
        ^return-to <s>)}

sp {deletethenfind*elaborate*isempty-yes
   (state <s> ^name deletethenfind
              ^isempty-done yes)
-->
   (<s> ^answer nothing)}

sp {deletethenfind*propose*findmin
   (state <s> ^name deletethenfind
              ^deletemin-done <lessone>
              ^isempty-done no
             -^findmin-done)
-->
   (<s> ^operator <o> +)
   (<o> ^name findmin
        ^heap <lessone>
        ^return-to <s>)}

sp {deletethenfind*elaborate*found
   (state <s> ^name deletethenfind
              ^findmin-done <elem>)
-->
   (<s> ^answer.just <elem>)}

sp {deletethenfind*elaborate*done
   (state <s> ^name deletethenfind
              ^return-to <r>
              ^answer <a>)
-->
   (<r> ^deletethenfind-done <a>)}

####################################################
# repeat takes an integer ^count and an ^elem
# and a ^return-to and constructs a list consisting
# of repeats of that elem
#sp {repeat*elaborate*initialize
#   (state <s> ^superstate.operator <o>)
#   (<o> ^name repeat
#        ^count <c>
#        ^elem <e>
#        ^return-to <r>)
#-->
#   (<s> ^name repeat
#        ^count <c>
#        ^elem <e>
#        ^return-to <r>)}
#
#sp {repeat*elaborate*zero
#   (state <s> ^name repeat
#              ^count 0)
#-->
#   (<s> ^answer nil)}
#
#sp {repeat*propose*recurse
#   (state <s> ^name repeat
#              ^count <c> > 0
#              ^elem <e>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name repeat
#        ^count (- <c> 1)
#        ^elem <e>
#        ^return-to <s>)}
#
#sp {repeat*elaborate*nonzero
#   (state <s> ^name repeat
#              ^elem <e>
#              ^repeat-done <a>)
#-->
#   (<s> ^answer.cons <c>)
#   (<c> ^first <e>
#        ^rest <a>)}
#
#sp {repeat*elaborate*done
#   (state <s> ^name repeat
#              ^return-to <r>
#              ^answer <a>)
#-->
#   (<s> ^repeat-done <a>)}

##############################################
# listsequal takes two lists ^left and ^right
# and a ^return-to and returns either
# yes or no
#sp {listsequal*elaborate*initialize
#   (state <s> ^superstate.operator <o>)
#   (<o> ^name listsequal
#        ^left <le>
#        ^right <ri>
#        ^return-to <ret>)
#-->
#   (<s> ^name listsequal
#        ^left <le>
#        ^right <ri>
#        ^return-to <ret>)}
#
#sp {listsequal*elaborate*nil-nil
#   (state <s> ^name listsequal
#              ^left nil
#              ^right nil)
#-->
#   (<s> ^answer yes)}
#
#sp {listsequal*elaborate*nil-cons
#   (state <s> ^name listsequal
#              ^left nil
#              ^right.cons)
#-->
#   (<s> ^answer no)}
#
#sp {listsequal*elaborate*cons-nil
#   (state <s> ^name listsequal
#              ^left.cons
#              ^right nil)
#-->
#   (<s> ^answer no)}
#
## Sigh - in the prolog version, I'm not just
## relying on the equality of lists,
## I'm relying on the equality of maybe too.
##sp {listsequal*elaborate*cons-cons-diff
##   (state <s> ^name listsequal
##              ^left.cons.first <x>
##              ^right.cons.first <> <x>)
##-->
##   (<s>
##listsequal(cons(X, Xs), cons(Y, Ys), Out) :- X \= Y, !,
##  Out = no.
##listsequal(cons(X, Xs), cons(Y, Ys), Out) :- X = Y, !,
##  listsequal(Xs, Ys, Out).
#
## TODO: equality of lists

######################################################
# perms takes a ^return-to
# and constructs (laboriously) a particular list of
# six heaps
#
# GAH this looks unpleasant
#
sp {perms*elaborate*initialize
   (state <s> ^superstate.operator <o>)
   (<o> ^name perms
        ^return-to <r>)
-->
   (<s> ^name perms
        ^return-to <r>
        ^c <c> ^bc <bc> ^abc <abc>
	       ^ac <ac> ^bac <bac>
	^a <a> ^ca <ca> ^bca <bca>
	       ^ba <ba> ^cba <cba>
	^b <b> ^ab <ab> ^cab <cab>
	       ^cb <cb> ^acb <acb>)}

sp {perms*propose*insert-a-empty
   (state <s> ^name perms
              ^a <a>)
   (<a> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem a
        ^heap empty
        ^return-to <a>)}

sp {perms*propose*insert-b-empty
   (state <s> ^name perms
              ^b <b>)
   (<b> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem b
        ^heap empty
        ^return-to <b>)}

sp {perms*propose*insert-c-empty
   (state <s> ^name perms
              ^c <c>)
   (<c> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem c
        ^heap empty
        ^return-to <c>)}


sp {perms*propose*insert-b-a
   (state <s> ^name perms
              ^a.insert-done <a>
              ^ba <ba>)
   (<ba> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem b
        ^heap <a>
        ^return-to <ba>)}

sp {perms*propose*insert-c-a
   (state <s> ^name perms
              ^a.insert-done <a>
              ^ca <ca>)
   (<ca> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem c
        ^heap <a>
        ^return-to <ca>)}

sp {perms*propose*insert-a-b
   (state <s> ^name perms
              ^b.insert-done <b>
              ^ab <ab>)
   (<ab> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem a
        ^heap <b>
        ^return-to <ab>)}

sp {perms*propose*insert-c-b
   (state <s> ^name perms
              ^b.insert-done <b>
              ^cb <cb>)
   (<cb> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem c
        ^heap <b>
        ^return-to <cb>)}

sp {perms*propose*insert-a-c
   (state <s> ^name perms
              ^c.insert-done <c>
              ^ac <ac>)
   (<ac> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem a
        ^heap <c>
        ^return-to <ac>)}

sp {perms*propose*insert-b-c
   (state <s> ^name perms
              ^c.insert-done <c>
              ^bc <bc>)
   (<bc> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem b
        ^heap <c>
        ^return-to <bc>)}

sp {perms*propose*insert-a-bc
   (state <s> ^name perms
              ^bc.insert-done <bc>
              ^abc <abc>)
   (<abc> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem a
        ^heap <bc>
        ^return-to <abc>)}

sp {perms*propose*insert-a-cb
   (state <s> ^name perms
              ^cb.insert-done <cb>
              ^acb <acb>)
   (<acb> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem a
        ^heap <cb>
        ^return-to <acb>)}

sp {perms*propose*insert-b-ac
   (state <s> ^name perms
              ^ac.insert-done <ac>
              ^bac <bac>)
   (<bac> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem b
        ^heap <ac>
        ^return-to <bac>)}

sp {perms*propose*insert-b-ca
   (state <s> ^name perms
              ^ca.insert-done <ca>
              ^bca <bca>)
   (<bca> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem b
        ^heap <ca>
        ^return-to <bca>)}

sp {perms*propose*insert-c-ba
   (state <s> ^name perms
              ^ba.insert-done <ba>
              ^cba <cba>)
   (<cba> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem c
        ^heap <ba>
        ^return-to <cba>)}

sp {perms*propose*insert-c-ab
   (state <s> ^name perms
              ^ab.insert-done <ab>
              ^cab <cab>)
   (<cab> -^insert-done)
-->
   (<s> ^operator <o> + =)
   (<o> ^name insert
        ^elem c
        ^heap <ab>
        ^return-to <cab>)}

sp {perms*elaborate*done
   (state <s> ^name perms
              ^return-to <r>
              ^abc.insert-done <abc>
              ^bac.insert-done <bac>
              ^bca.insert-done <bca>
              ^cba.insert-done <cba>
              ^cab.insert-done <cab>
              ^acb.insert-done <acb>)
-->
   (<r> ^perms-done.cons <c1>)
   (<c1> ^first <abc>
         ^rest.cons <c2>)
   (<c2> ^first <bac>
         ^rest.cons <c3>)
   (<c3> ^first <bca>
         ^rest.cons <c4>)
   (<c4> ^first <cba>
         ^rest.cons <c5>)
   (<c5> ^first <cab>
         ^rest.cons <c6>)
   (<c6> ^first <acb>
         ^rest nil)}


