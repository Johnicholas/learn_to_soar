# problem ::= Problem(initialstate, statespace)
# assume operators:
# goaltest(?space, ?state) -> True or False
# actions(?space, ?state) -> List of Actions
# result(?space, ?state, ?action) -> State

# path ::= EmptyPath(startstate) | PathNode(finalstate, finalaction, parent)
# define an accessor:
last(EmptyPath(?startstate)) == ?startstate
last(PathNode(?finalstate, ?finalaction, ?parent)) == ?finalstate

# assume a smart constructor, add:
# add(priority queue, path)
# assume dumb destructors
# priorityqueue ::= EmptyPQueue | PQueue(shortest path, rest of frontier)

treesearchStart(Problem(?init, ?s)) == treesearchMaybeFail(add(EmptyPQueue, EmptyPath(?init)), ?s)
treesearchMaybeFail(EmptyPQueue, ?s) == Fail
treesearchMaybeFail(PQueue(?p, ?f), ?s) == treesearchMaybeFound(goaltest(?s, last(?p)), ?p, ?f, ?s)    
treesearchMaybeFound(True, ?p, ?f, ?s) == Found(?p)
treesearchMaybeFound(False, ?p, ?f, ?s) == treesearchExpand(actions(?s, last(?p)), ?p, ?f, ?s)
treesearchExpand(Nil, ?p, ?f, ?s) == treesearchMaybeFail(?f, ?s)
treesearchExpand(Cons(?a, ?as), ?p, ?f, ?s) ==
    treesearchExpand(?as, ?p, add(?f, PathNode(result(?s, last(?p), ?a), ?a, ?p)), ?s)

# for graphsearch, we need a set data structure for the explored set
# we assume there's an "in" accessor, for both the frontier and the explored

graphsearchStart(Problem(?init, ?s)) ==
    graphsearchMaybeFail(add(EmptyPQueue, EmptyPath(?init)), EmptySet, ?s)
graphsearchMaybeFail(EmptyPQueue, ?e, ?s) ==
    Fail
graphsearchMaybeFail(PQueue(?p, ?f), ?e, ?s) ==
    graphsearchMaybeFound(goaltest(?s, last(?p)), ?p, ?f, ?e, ?s)
graphsearchMaybeFound(True, ?p, ?f, ?e, ?s) ==
    Found(?p)
graphsearchMaybeFound(False, ?p, ?f, ?e, ?s) ==
    graphsearchMaybeExpand(or(in(?f, last(?p)), in(?e, last(?p))), ?p, ?f, ?e, ?s)
graphsearchMaybeExpand(True, ?p, ?f, ?e, ?s) ==
    graphsearchMaybeFail(?f, ?e, ?s) # already either scheduled or explored
graphsearchMaybeExpand(False, ?p, ?f, ?e, ?s) ==
    graphsearchExpand(actions(?s, last(?p)), ?p, ?f, ?e, ?s)
graphsearchExpand(Nil, ?p, ?f, ?e, ?s) ==
    graphsearchMaybeFail(?f, add(?e, ?p), ?s)
graphsearchExpand(Cons(?a, ?as), ?p, ?f, ?e, ?s) ==
    graphsearchExpand(?as, ?p, add(?f, PathNode(result(?s, last(?p), ?a), ?a, ?p)), ?e, ?s)


# this is all very well, but we need some actual data structures,
# and actual spaces to search.
# I think Auburn has heaps, but I need a persistent balanced-tree data structure.
# This AVL implementation (adapted from avltree.pure) might work:
# AVL trees are a form of balanced tree with two constructor symbols, Nil for an
# empty tree, and Bin(h, x, l, r), which represents a tree of height h, with x
# stored at the root, and left and right subtrees l and r.
# Setting the height correctly is annoying, so we use a helper
# to do it for us. Assuming l and r are trees with correct height,
# this constructs a new tree with correct height.

makenode(?x, ?l, ?r) == Bin(max(height(?l), height(?r))+1, ?x, ?l, ?r)

# In defining makenode, we used max, and height. Max demonstrates if,
# which is a Req primitive.

max(?x, ?y) == if ?x > ?y then ?x else ?y

# Aside: We could define 'if' rather than having it be a primitive if we encoded
# numbers as trees (Peano, or some other representation).
# Height is simply an accessor. We can specify how it behaves
# very simply by pattern patching on the left hand side.

height(Nil) == 0
height(Bin(?h, ?x, ?l, ?r)) == ?h

# Notice that it is not really measuring the height, it is merely
# accessing the (possibly incorrect) stored height. The height of this
# tree should be 1, but it is incorrectly stored as 4.
height(Bin(4, 10, Nil, Nil)) = 4
# So now that we have defined makenode and all the tools it needs,
# we can test it:
makenode(4, makenode(5, Nil, Nil), makenode(3, Nil, Nil)) = Bin(2, 4, Bin(1, 5, Nil, Nil), Bin(1, 3, Nil, Nil))
# See how the first (height) field is set to 1 for each branch, but
# 2 for the root?
# The makenode is convenient, but it is possible to create unbalanced
# trees with it. A smarter constructor would rebalance the tree
# on construction.

avl(?x, ?l, ?r) == rebalance(makenode(?x, ?l, ?r))

# The notion of balanced that AVL trees maintain is that their "slope"
# is either 0, 1, or -1. The slope of a tree is the difference
# between the heights of its left and right subtrees.

slope(Nil) == 0
slope(Bin(?h, ?x, ?l, ?r)) == height(?l) - height(?r)

# If the inputs to makenode were AVL trees, then the output will be
# "nearly" an AVL tree; it might have a slope of -2 or 2, instead
# of just 0, 1, or -1. We will define functions to rebalance each
# case.

rebalance(?t) == if slope(?t) = ~2 then shiftleft(?t) else (if slope(?t) = 2 then shiftright(?t) else ?t)

# Note: Req uses ~ for unary minus. It is one of the very few bits of syntax you
# have to learn to use it.

# In general, rebalancing is based on "rolling" trees left and right.

rollleft(Bin(?h, ?x, ?l, Bin(?rh, ?rx, ?rl, ?rr))) == makenode(?rx, makenode(?x, ?l, ?rl), ?rr)
rollright(Bin(?h, ?x, Bin(?lh, ?lx, ?ll, ?lr), ?r)) == makenode(?lx, ?ll, makenode(?x, ?lr, ?r))

# If we had a left-leaning tree, we could roll it right, to get a right-leaning
# tree.

leftleaning := makenode(2, makenode(1, Nil, Nil), Nil)

# Note that ":=" is just like "==", except it rewrites the right
# hand side first.

leftleaning = Bin(2, 2, Bin(1, 1, Nil, Nil), Nil)
rollright(leftleaning) = Bin(2, 1, Nil, Bin(1, 2, Nil, Nil))

# Using rollleft and rollright, we can define shiftleft and shiftright.
# This is a clever thing to do - if you had defined shiftleft and
# shiftright like this (in 1962), your initials might be on the name,
# rather than Adelson-Velskii and Landis.

shiftleft(Bin(?h, ?x, ?l, ?r)) == rollleft( if slope(?r) = 1 then makenode(?x, ?l, rollright(?r)) else Bin(?h, ?x, ?l, ?r) )
shiftright(Bin(?h, ?x, ?l, ?r)) == rollright( if slope(?r) = ~1 then makenode(?x, ?l, rollright(?r)) else Bin(?h, ?x, ?l, ?r) )

# Aside: Remember, Req uses ~ for unary minus.

# So now that we have avl defined, we can use it to balance an unbalanced tree.

example1234 := avl(1, avl(2, avl(3, avl(4, Nil, Nil), Nil), Nil), Nil)

example1234 = Bin(3, 3, Bin(1, 4, Nil, Nil), Bin(2, 1, Bin(1, 2, Nil, Nil), Nil))

# Or leaning in the opposite direction:

example4321 := avl(4, Nil, avl(3, Nil, avl(2, Nil, avl(1, Nil, Nil))))

example4321 = Bin(3, 2, Bin(2, 4, Nil, Bin(1, 3, Nil, Nil)), Bin(1, 1, Nil, Nil))

# An insert (at the sorted position) is quite easy.

insert(Nil, ?y) == Bin(?y, 1, Nil, Nil)
insert(Bin(?h, ?x, ?l, ?r), ?y) == if ?x < ?y then avl(?x, insert(?l, ?y), ?r) else avl(?x, ?l, insert(?r, ?y))

# Delete (from a sorted AVL tree) seems like it would be easy, and two of the
# cases are easy, but we need to be able to join two sorted AVL trees.

delete(Nil, ?y) == Nil
delete(Bin(?h, ?x, ?l, ?r), ?y) == if ?x < ?y then avl(?x, delete(?l, ?y), ?r) else (if ?x > ?y then avl(?x, ?l, delete(?r, ?y)) else join(?l, ?r))

# We can solve this by assuming we have one function that can pick out the last
# element of a sorted AVL tree, and another function that can construct the
# AVL tree minus the very last element. Then after applying those functions
# to the left subtree, we have two subtrees and a middle, which we can
# pass to the smart avl constructor.

join(Nil, ?r) == ?r
join(Bin(?lh, ?lx, ?ll, ?lr), ?r) == avl(last(?lx, ?lr), init(?lx, ?ll, ?lr), ?r)

# To define last, we look at the right subtree. If the right subtree is empty,
# then we have found the last element, otherwise we recurse.

last(?x, Nil) == ?x
last(?x, Bin(?rh, ?rx, ?rl, ?rr)) == last(?rx, ?rr)

# We can test on the previously constructed examples:

last(0, example1234)

# Note: The last is also the least, we are sorting descending.

# To define init, we follow the same path, but build the answer up as we return
# from that path using the avl smart constructor.

init(?x, ?l, Nil) == ?l
init(?x, ?l, Bin(?rh, ?rx, ?rl, ?rr)) == avl(?x, ?l, init(?rx, ?rl, ?rr))

# And test:

init(3, Bin(1, 4, Nil, Nil), Bin(2, 1, Bin(1, 2, Nil, Nil), Nil)) = Bin(2, 3, Bin(1, 4, Nil, Nil), Bin(1, 2, Nil, Nil))

# Now we have all the tools defined to make join work:

join(Bin(1, 1, Nil, Nil), Bin(1, 2, Nil, Nil)) = Bin(2, 1, Nil, Bin(1, 2, Nil, Nil))
join(Bin(1, 2, Nil, Nil), Bin(1, 1, Nil, Nil)) = Bin(2, 2, Nil, Bin(1, 1, Nil, Nil))

# And join was the only thing we needed to make delete work.

delete(example1234, 1) = Bin(2, 3, Bin(1, 4, Nil, Nil), Bin(1, 2, Nil, Nil))
delete(example1234, 2) = Bin(2, 3, Bin(1, 4, Nil, Nil), Bin(1, 1, Nil, Nil))
delete(example1234, 3) = Bin(2, 2, Bin(1, 4, Nil, Nil), Bin(1, 1, Nil, Nil))
delete(example1234, 4) = Bin(2, 2, Bin(1, 3, Nil, Nil), Bin(1, 1, Nil, Nil))

# Finally, we can use ordinary sorted-binary-tree lookups,
# with a logarithmic time guarantee because the tree is
# always balanced.

lookup(Nil, ?y) == Nothing
lookup(Bin(?h, ?x, ?l, ?r), ?y) == if ?x < ?y then lookup(?l, ?y) else (if ?x > ?y then lookup(?r, ?y) else Just(?x))

lookup(example1234, 0) = Nothing
lookup(example1234, 1) = Just(1)
lookup(example1234, 2) = Just(2)
lookup(example1234, 3) = Just(3)
lookup(example1234, 4) = Just(4)
lookup(example1234, 5) = Nothing
